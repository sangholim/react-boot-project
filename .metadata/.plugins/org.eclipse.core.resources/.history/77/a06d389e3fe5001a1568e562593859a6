package com.spa.all.user.web;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.WebSession;

import com.spa.all.config.dbc.MysqlConfig;
import com.spa.all.user.params.User;
import com.spa.all.user.repo.UserRepository;
import com.spa.all.user.sql.UserQueryContainer;

import reactor.core.publisher.Mono;

@RestController
public class UserController {

    @Autowired private UserRepository userRepository;
    /**
     * user 추가 [단일]
     * 
     * @param request
     * @return
     */
    @PostMapping(value = "/register", consumes = "application/json", produces = "application/json")
    public Mono<User> register(@RequestBody User user) {
	Map<String, Object> result = new HashMap<>();
	/*
	 * client.execute(UserQueryContainer.getUser).bind("username",
	 * user.getUsername()).fetch().one().flatMap(m -> { result.put("result",
	 * "400. Already Registered Exist User"); return null;
	 * }).switchIfEmpty(client.insert().into(User.class).using(user).map(r -> {
	 * result.put("result", "200. Success User Register"); return null;
	 * 
	 * }).one());
	 */
	// 유저가 존재하면 fail 처리
	userRepository.findByUsername(user.getUsername()).flatMap(u -> {
	    result.put("result", "400 EXIST USER");
	    return null;
	}).switchIfEmpty(userRepository.addUser(user).flatMap(u -> {
	    result.put("result", "200 Success Create User");
	    return null;
	}));
	return userRepository.findByUsername(user.getUsername());

    }

    /**
     * 로그인하기
     * 
     * @param request
     * @return
     */
    @PostMapping(value = "/login", consumes = "application/json", produces = "application/json")
    public Mono<Map<String, Object>> login(@RequestBody User user, WebSession session) {
	Map<String, Object> result = new HashMap<>();
	result.put("result", 1);
	/*
	 * Mono<User> createUser = request.bodyToMono(User.class); Mono<String> result =
	 * createUser.flatMap(user -> { if (user.getUsername() == null ||
	 * user.getPassword() == null) { // user가 없을떄 수행하지 않음 return Mono.empty(); }
	 * 
	 * DatabaseClient client = mysqlConfig.createClient(); return
	 * client.execute(UserQueryContainer.getMatchUser).bind("username",
	 * user.getUsername()) .bind("password",
	 * user.getPassword()).fetch().one().flatMap(m -> { // request에 sessionId 전달후
	 * //Mono<MapSession> //Mono<MapSession> session =
	 * reactiveSessionRepository.createSession(); return
	 * Mono.just("200. Success Login id: " + request.attributes().get("sessionId"));
	 * }); }).defaultIfEmpty("400. Fail Login");
	 */
	return Mono.just(result);

    }

}
