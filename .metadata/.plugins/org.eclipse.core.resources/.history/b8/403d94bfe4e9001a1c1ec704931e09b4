package com.spa.all.todos.web;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.spa.all.config.dbc.MysqlConfig;
import com.spa.all.todos.params.Todo;
import com.spa.all.todos.sql.TodosQueryContainer;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
public class TodosController {

    @Autowired private MysqlConfig mysqlConf;

    /**
     * todosList 가져오는 query 반드시 Flux Class로 반환
     * 
     * @param request
     * @return
     */
    @PostMapping(value = "/todosList", consumes = "application/json", produces = "application/json")
    public Flux<Map<String, Object>> todosList() {
	DatabaseClient client = mysqlConf.createClient();

	return client.execute(TodosQueryContainer.getAllTodos).fetch().all();
    }

    /**
     * todo 추가 [단일]
     * 
     * @param request
     * @return
     */
    @PostMapping(value = "/insertTodo", consumes = "application/json", produces = "application/json")
    public Mono<Map<String, Object>> insertTodo(@RequestBody Todo todo) {
	DatabaseClient client = mysqlConf.createClient();
	Map<String, Object> result = new HashMap<>();
	result.put("result", "400 Fail Create Todo");

	return client.insert().into("todos").value("text", todo.getText()).fetch().one().map(r -> {
	    result.put("result", "200 Success Create Todo");
	    return result;
	}).defaultIfEmpty(result);
    }

    /**
     * todo 삭제
     * 
     * @param request
     * @return
     */
    @PostMapping(value = "/deleteTodo", consumes = "application/json", produces = "application/json")
    public Mono<Map<String, Object>> deleteTodo(@RequestBody Todo todo) {
	DatabaseClient client = mysqlConf.createClient();
	Map<String, Object> result = new HashMap<>();
	result.put("result", "400 Fail Delete Todo");

	return client.execute(TodosQueryContainer.delTodo).bind("id", todo.getId()).fetch().rowsUpdated().map(r -> {
	    result.put("result", "200 Success Delete Todo");
	    return result;
	}).defaultIfEmpty(result);

    }

}
