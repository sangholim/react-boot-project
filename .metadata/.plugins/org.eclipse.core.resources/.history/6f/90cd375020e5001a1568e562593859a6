package com.spa.all.user.repo;

import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.data.r2dbc.repository.Query;
import org.springframework.data.r2dbc.repository.R2dbcRepository;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.spa.all.user.params.User;
import com.spa.all.user.sql.UserQueryContainer;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public interface UserRepository extends R2dbcRepository<User, Long>{

    /**
     * user 질의
     * 
     * @param request
     * @return
     */
    @Query(UserQueryContainer.getUser)
    public Mono<User> getUser(String usernmae);

    /**
     * 유저 매칭
     * 
     * @param request
     * @return
     */
    @Query(UserQueryContainer.getMatchUser)
    public Mono<User> matchUser(User user) {
	// get User From mono
	Mono<User> createUser = request.bodyToMono(User.class);
	Mono<String> result = createUser.flatMap(user -> {
	    if (user.getUsername() == null || user.getPassword() == null) {
		// user가 없을떄 수행하지 않음
		return Mono.empty();
	    }

	    DatabaseClient client = mysqlConfig.createClient();
	    return client.execute(UserQueryContainer.getMatchUser).bind("username", user.getUsername())
		    .bind("password", user.getPassword()).fetch().one().flatMap(m -> {
			// request에 sessionId 전달후
			//Mono<MapSession>
			//Mono<MapSession> session = reactiveSessionRepository.createSession();
			return Mono.just("200. Success Login id: " + request.attributes().get("sessionId"));
		    });
	}).defaultIfEmpty("400. Fail Login");

	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(result, Object.class);

    }

    /**
     * user 삭제
     * 
     * @param request
     * @return
     */
    public Mono<ServerResponse> deleteUser(ServerRequest request) {
	/*
	 * Optional<String> id = request.queryParam("id"); Mono<Integer> mono =
	 * mysqlConfig.createClient().execute(TodosQueryContainer.delTodo).bind("id",
	 * id.get()) .fetch().rowsUpdated();
	 */
	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(Flux.just("Invalid Data"),
		String.class);
    }
}
