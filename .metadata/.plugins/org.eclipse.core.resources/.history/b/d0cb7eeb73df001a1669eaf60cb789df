package com.spa.all.todos.web;

import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.spa.all.config.RouteHandler;
import com.spa.all.config.dbc.MysqlConfig;
import com.spa.all.todos.sql.TodosQueryContainer;

import io.r2dbc.spi.Connection;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
@Scope(value = "prototype")
public class TodosHandler implements RouteHandler{

    @Autowired private MysqlConfig mysqlConfig;
    
    private HashMap result = new HashMap<>();

    private Mono<HashMap> mapper = Mono.just(result);

    public Mono<ServerResponse> todosList(ServerRequest request) {
	result.put("number", 1234);
	result.put("textr", "hello world!");
	/*
	 *     Mono<HashMap<Object, Object>>  mono = Mono.from(pool.create()).map(connection ->  //커넥션 가공
        Flux.from(connection.createStatement("select name, desc, date from test where id_=?ids").bind("ids", "2").execute())
        .concatMap( result-> //1차 변환
            result.map((row, rowMetadata)-> {  //결과 재 조립 후 리턴
                HashMap<Object, Object> item = new HashMap<>();
                item.put("names", row.get("name",String.class));
                item.put("desc", row.get("desc",String.class));
                item.put("date", row.get("date",Object.class));
                return item;
            })
        ).doFinally( (st)->{connection.close();})
    ).flatMap( ccc -> Mono.from(ccc));  //2차 변환
    return mono;
	 */
	Mono<HashMap<Object, Object>> mono = Mono.from(mysqlConfig.createConnection()).map
		(connection -> Flux.from(connection.createStatement(TodosQueryContainer.getAllTodos).execute())
			.concatMap(
				result -> result.map((row, rowMetadata) -> {
		    HashMap<Object, Object> item = new HashMap<>();
	                item.put("id", row.get("id",Long.class));
	                item.put("text", row.get("text",String.class));
	                item.put("check", false);
	                return item;
		})
			).doFinally( (st) -> {con);
	
	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)
		.body(BodyInserters.fromProducer(mapper, HashMap.class));
    }
}
