package com.spa.all.config.dbc;

import org.reactivestreams.Publisher;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.r2dbc.core.DatabaseClient;

import io.r2dbc.pool.ConnectionPool;
import io.r2dbc.spi.Connection;

@Configuration
public class MysqlConfig {

    private ConnectionPool connectionPool;
    
    @Value("${spring.r2dbc.url}")
    private String url;
    @Value("${spring.r2dbc.username}")
    private String username;
    @Value("${spring.r2dbc.password}")
    private String password;
    @Value("${spring.r2dbc.pool.initialSize}")
    private int initialSize;
    @Value("${spring.r2dbc.pool.maxSize}")
    private int maxSize;
    @Value("${spring.r2dbc.pool.maxIdleTime}")
    private int maxIdleTime;
    @Value("${spring.r2dbc.pool.maxLifeTime}")
    private int maxLifeTime;
    @Value("${spring.r2dbc.pool.maxCreateConnectionTime}")
    private int maxCreateConnectionTime;
    @Value("${spring.r2dbc.pool.validationQuery}")
    private String validationQuery;
    @Value("${spring.r2dbc.pool.name}")
    private String name;

    private final DatabaseClient databaseClient;
    
    public MysqlConfig (DatabaseClient databaseClient) {
	this.databaseClient = databaseClient;
    }

    /*
    @Override
    public void run(ApplicationArguments args) throws Exception {
	// r2dbc:mysql://user:user@localhost:3306/todos?useUnicode=true&characterEncoding=utf8
	String[] urlComps = url.split("//");
	
	ConnectionFactory connectionFactory = ConnectionFactories.get(urlComps[0] + "//" + username + ':' + password + '@' + urlComps[1]);
	// ConnectionPool 설정
	ConnectionPoolConfiguration poolConfiguration = ConnectionPoolConfiguration.builder(connectionFactory)
		.initialSize(initialSize).maxSize(maxSize).maxIdleTime(Duration.ofMinutes(maxIdleTime))
		.maxLifeTime(Duration.ofMinutes(maxLifeTime))
		.maxCreateConnectionTime(Duration.ofMillis(maxCreateConnectionTime))
		.validationDepth(ValidationDepth.LOCAL).validationQuery(validationQuery).name(name).build();
	connectionPool = new ConnectionPool(poolConfiguration);

	client = DatabaseClient.create(connectionPool);
	
	}	
	*/
    /**
     * db에 세션 접속하는 로직
     * 
     * @return
     */
    public Publisher<? extends Connection> createConnection() {
	return connectionPool.create();
    }
    
    public DatabaseClient createClient () {
	return null;
    }
}
