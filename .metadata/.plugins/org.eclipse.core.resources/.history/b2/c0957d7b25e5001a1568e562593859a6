package com.spa.all.config.dbc;

import org.reactivestreams.Publisher;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.r2dbc.core.DatabaseClient;

import io.r2dbc.pool.ConnectionPool;
import io.r2dbc.spi.Connection;

@Configuration
public class MysqlConfig {

    private ConnectionPool connectionPool;
    
    @Value("${spring.r2dbc.url}")
    private String url;
    @Value("${spring.r2dbc.username}")
    private String username;
    @Value("${spring.r2dbc.password}")
    private String password;
    @Value("${spring.r2dbc.pool.initialSize}")
    private int initialSize;
    @Value("${spring.r2dbc.pool.maxSize}")
    private int maxSize;
    @Value("${spring.r2dbc.pool.maxIdleTime}")
    private int maxIdleTime;
    @Value("${spring.r2dbc.pool.maxLifeTime}")
    private int maxLifeTime;
    @Value("${spring.r2dbc.pool.maxCreateConnectionTime}")
    private int maxCreateConnectionTime;
    @Value("${spring.r2dbc.pool.validationQuery}")
    private String validationQuery;
    @Value("${spring.r2dbc.pool.name}")
    private String name;

    private final DatabaseClient databaseClient;
    
    public MysqlConfig (DatabaseClient databaseClient) {
	this.databaseClient = databaseClient;
    }

    @EventListener(value = ContextRefreshedEvent.class)
    public void init() {
        this.databaseClient.insert()
                .into("posts")
                //.nullValue("id", Integer.class)
                .value("title", "First post title")
                .value("content", "Content of my first post")
                // see: https://github.com/spring-projects/spring-data-r2dbc/issues/251
                // .map((r, m) -> r.get("id", Integer.class))
                .map((r, m) -> r.get(0, Integer.class))
                .all()
                .log()
                .thenMany(
                        this.databaseClient.select()
                                .from("posts")
                                .orderBy(Sort.by(desc("id")))
                                .as(Post.class)
                                .fetch()
                                .all()
                                .log()
                )
                .subscribe(null, null, () -> log.info("initialization is done..."));
    }
    /**
     * db에 세션 접속하는 로직
     * 
     * @return
     */
    public Publisher<? extends Connection> createConnection() {
	return connectionPool.create();
    }
    
    public DatabaseClient createClient () {
	return null;
    }
}
