package com.spa.all.user.web;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.spa.all.config.dbc.MysqlConfig;
import com.spa.all.user.params.User;
import com.spa.all.user.sql.UserQueryContainer;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Component
public class UserHandler {

    @Autowired
    private MysqlConfig mysqlConfig;

    /**
     * user 추가 [단일]
     * 
     * @param request
     * @return
     */
    public Mono<ServerResponse> insertUser(ServerRequest request) {
	// get User From mono
	Mono<User> createUser = request.bodyToMono(User.class);
	try {
	    Mono<Integer> then = mysqlConfig.createClient().insert().into(User.class).using(createUser).map(r -> r.get(0, Integer.class)).one();
	    // Handler 결과를 제대로 받지 못하면 ex) NPE...., 쿼리 실행되지 않음..
	    return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(then, Integer.class);

	} catch (Exception e) {
	    return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(Flux.just("Invalid Data"),
		    String.class);
	}
	/*
	Mono<Map<String, Object>> resultMono = mysqlConfig.createClient().execute(UserQueryContainer.getUser)
		.bind("username", user.get().getUsername()).fetch().one()
		.switchIfEmpty(mysqlConfig.createClient().execute(UserQueryContainer.addUser)
			.bind("username", user.get().getUsername()).bind("password", user.get().getPassword()).map(r -> {
			    Map<String, Object> resultMap = new HashMap<String, Object>();
			    resultMap.put("result", r.get(0));
			    return resultMap;
			}).one());
	
	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(resultMono, Map.class);
	*/
	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(then, Integer.class);
    }

    /**
     * user 삭제
     * 
     * @param request
     * @return
     */
    public Mono<ServerResponse> deleteUser(ServerRequest request) {
	/*
	 * Optional<String> id = request.queryParam("id"); Mono<Integer> mono =
	 * mysqlConfig.createClient().execute(TodosQueryContainer.delTodo).bind("id",
	 * id.get()) .fetch().rowsUpdated();
	 */
	return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(Flux.just("Invalid Data"),
		String.class);
    }

}
