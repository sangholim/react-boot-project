package com.spa.all.config.dbc;

import org.reactivestreams.Publisher;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;

import io.r2dbc.spi.Connection;
import io.r2dbc.spi.ConnectionFactories;
import io.r2dbc.spi.ConnectionFactory;

@Configuration
public class MysqlConfig {

    @Value("${spring.r2dbc.url}")
    private String url;
    @Value("${spring.r2dbc.username}")
    private String username;
    @Value("${spring.r2dbc.password}")
    private String password;
    @Value("${spring.r2dbc.pool.initialSize}")
    private int initialSize;
    @Value("${spring.r2dbc.pool.maxSize}")
    private int maxSize;
    @Value("${spring.r2dbc.pool.maxIdleTime}")
    private int maxIdleTime;
    @Value("${spring.r2dbc.pool.maxLifeTime}")
    private int maxLifeTime;
    @Value("${spring.r2dbc.pool.maxCreateConnectionTime}")
    private int maxCreateConnectionTime;
    @Value("${spring.r2dbc.pool.validationQuery}")
    private String validationQuery;
    @Value("${spring.r2dbc.pool.name}")
    private String name;

    private ConnectionFactory connectionFactory;

    private DatabaseClient client;
    
    @Bean
    public ConnectionFactory connectionFactory() {
	String[] urlComps = url.split("//");
	ConnectionFactory connectionFactory = ConnectionFactories
		.get(urlComps[0] + "//" + username + ':' + password + '@' + urlComps[1]);
	this.connectionFactory = connectionFactory;
	this.client = DatabaseClient.create(connectionFactory);
	return connectionFactory;
    }

    /**
     * db에 세션 접속하는 로직
     * 
     * @return
     */
    public Publisher<? extends Connection> createConnection() {
	return connectionFactory.create();
    }

    public DatabaseClient createClient() {
	return this.client;
    }
}
